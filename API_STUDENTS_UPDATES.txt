═══════════════════════════════════════════════════════════════════════════════
  ОБНОВЛЕНИЯ API ДЛЯ РАБОТЫ СО СТУДЕНТАМИ - ДОБАВЛЕНО ПОЛЕ TG_NAME
═══════════════════════════════════════════════════════════════════════════════

Дата: 12.10.2025
Описание: Добавлена поддержка Telegram никнеймов для студентов


═══════════════════════════════════════════════════════════════════════════════
1. ОБНОВЛЕН РОУТ: ДОБАВЛЕНИЕ СТУДЕНТА
═══════════════════════════════════════════════════════════════════════════════

Метод: POST
URL: /api/add-student

ИЗМЕНЕНИЯ:
- Добавлено новое необязательное поле "tg_name" для Telegram никнейма

BODY ЗАПРОСА:
{
  "full_name": "Иванов Иван",
  "class": 9,
  "tg_name": "@ivanov_ivan"  // НЕОБЯЗАТЕЛЬНО - можно не передавать
}

ПРИМЕР УСПЕШНОГО ОТВЕТА:
{
  "status": true,
  "message": "Студент успешно добавлен",
  "student_data": {
    "student_id": 123,
    "full_name": "Иванов Иван",
    "class": 9,
    "login": "iivanov9",
    "password": "aB3dF8g2",
    "group_id": null,
    "tg_name": "@ivanov_ivan"  // НОВОЕ ПОЛЕ
  }
}

ПРИМЕР ОТВЕТА С ОШИБКОЙ:
{
  "status": false,
  "error": "Описание ошибки"
}


═══════════════════════════════════════════════════════════════════════════════
2. НОВЫЙ РОУТ: РЕДАКТИРОВАНИЕ СТУДЕНТА
═══════════════════════════════════════════════════════════════════════════════

Метод: PUT
URL: /api/edit-student

ОПИСАНИЕ:
Позволяет обновить данные студента. Можно обновить одно или несколько полей.
Все поля кроме student_id необязательны.

BODY ЗАПРОСА:
{
  "student_id": 123,              // ОБЯЗАТЕЛЬНО
  "full_name": "Новое Имя",       // необязательно
  "class": 10,                    // необязательно
  "group_id": 5,                  // необязательно
  "tg_name": "@new_username"      // необязательно
}

ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ:

Пример 1 - Обновить только Telegram:
{
  "student_id": 123,
  "tg_name": "@new_username"
}

Пример 2 - Обновить несколько полей:
{
  "student_id": 123,
  "full_name": "Петров Петр",
  "tg_name": "@petrov_petr"
}

Пример 3 - Обновить все поля:
{
  "student_id": 123,
  "full_name": "Сидоров Сидор",
  "class": 11,
  "group_id": 7,
  "tg_name": "@sidorov"
}

ПРИМЕР УСПЕШНОГО ОТВЕТА:
{
  "status": true,
  "message": "Данные студента успешно обновлены",
  "student_data": {
    "student_id": 123,
    "full_name": "Петров Петр",
    "class": 10,
    "group_id": 5,
    "tg_name": "@petrov_petr"
  }
}

ПРИМЕРЫ ОТВЕТОВ С ОШИБКАМИ:

Студент не найден:
{
  "status": false,
  "error": "Студент с ID 999 не найден"
}

Не указаны поля для обновления:
{
  "status": false,
  "error": "Необходимо указать хотя бы одно поле для обновления"
}

Некорректный класс:
{
  "status": false,
  "error": "Класс должен быть 9, 10 или 11"
}


═══════════════════════════════════════════════════════════════════════════════
3. НОВЫЙ РОУТ: ВАЛИДАЦИЯ СТУДЕНТА ПО TELEGRAM
═══════════════════════════════════════════════════════════════════════════════

Метод: POST
URL: /api/validate-student-by-tg

ОПИСАНИЕ:
Проверяет существование студента по Telegram никнейму.
Если студент найден - возвращает его данные и ФИО.

BODY ЗАПРОСА:
{
  "tg_name": "@ivanov_ivan"  // ОБЯЗАТЕЛЬНО
}

ПРИМЕР УСПЕШНОГО ОТВЕТА (студент найден):
{
  "status": true,
  "message": "Студент найден",
  "student_data": {
    "student_id": 123,
    "full_name": "Иванов Иван",
    "class": 10,
    "group_id": 5,
    "tg_name": "@ivanov_ivan"
  }
}

HTTP CODE: 200

ПРИМЕР ОТВЕТА (студент НЕ найден):
{
  "status": false,
  "message": "Студент с таким Telegram никнеймом не найден"
}

HTTP CODE: 404

ПРИМЕР ОТВЕТА С ОШИБКОЙ:
{
  "status": false,
  "error": "Telegram никнейм не может быть пустым"
}

HTTP CODE: 400


═══════════════════════════════════════════════════════════════════════════════
ВАЖНЫЕ ЗАМЕЧАНИЯ ДЛЯ ФРОНТЕНД-РАЗРАБОТЧИКА
═══════════════════════════════════════════════════════════════════════════════

1. ПОЛЕ tg_name ВЕЗДЕ НЕОБЯЗАТЕЛЬНО
   - При добавлении студента можно не передавать tg_name
   - При редактировании студента можно не передавать tg_name
   - Если не передавать - в БД будет NULL

2. ФОРМАТ TELEGRAM НИКНЕЙМА
   - Можно передавать с @ или без @
   - Примеры: "@username" или "username"
   - Бэкенд принимает любой формат

3. HTTP КОДЫ ОТВЕТОВ
   - 200 - успешная операция
   - 400 - ошибка валидации данных
   - 404 - студент не найден (для validate-student-by-tg)

4. ВСЕ РОУТЫ ВОЗВРАЩАЮТ JSON
   - Всегда проверяй поле "status" (true/false)
   - При status: false - читай поле "error" с описанием ошибки
   - При status: true - читай поле "student_data" с данными

5. СОВМЕСТИМОСТЬ
   - Старый функционал не сломан
   - Если не передавать tg_name - всё работает как раньше
   - Обратная совместимость сохранена


═══════════════════════════════════════════════════════════════════════════════
ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ В КОДЕ (JavaScript/TypeScript)
═══════════════════════════════════════════════════════════════════════════════

// 1. Добавление студента с Telegram
const addStudent = async (fullName, classNum, tgName) => {
  const response = await fetch('/api/add-student', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      full_name: fullName,
      class: classNum,
      tg_name: tgName  // может быть null/undefined
    })
  });
  return await response.json();
};

// 2. Редактирование студента
const editStudent = async (studentId, updates) => {
  const response = await fetch('/api/edit-student', {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      student_id: studentId,
      ...updates  // { tg_name: "@newname" } или другие поля
    })
  });
  return await response.json();
};

// 3. Проверка студента по Telegram
const validateStudentByTg = async (tgName) => {
  const response = await fetch('/api/validate-student-by-tg', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ tg_name: tgName })
  });
  const data = await response.json();
  
  if (data.status) {
    console.log('Студент найден:', data.student_data.full_name);
    return data.student_data;
  } else {
    console.log('Студент не найден');
    return null;
  }
};


═══════════════════════════════════════════════════════════════════════════════
ТИПЫ ДЛЯ TYPESCRIPT (если используется)
═══════════════════════════════════════════════════════════════════════════════

interface StudentData {
  student_id: number;
  full_name: string;
  class: number;
  group_id: number | null;
  tg_name: string | null;
  login?: string;  // только при создании
  password?: string;  // только при создании
}

interface ApiResponse {
  status: boolean;
  message?: string;
  error?: string;
  student_data?: StudentData;
}


═══════════════════════════════════════════════════════════════════════════════
КОНЕЦ ДОКУМЕНТАЦИИ
═══════════════════════════════════════════════════════════════════════════════

При возникновении вопросов - обращайтесь к бэкенд-разработчику.

