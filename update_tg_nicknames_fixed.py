#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import mysql.connector
from db import db

def clean_telegram_username(tg_name):
    """
    –û—á–∏—â–∞–µ—Ç Telegram –Ω–∏–∫–Ω–µ–π–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    """
    if pd.isna(tg_name) or tg_name == "":
        return ""

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
    tg_name = str(tg_name).strip()

    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ t.me, –∏–∑–≤–ª–µ–∫–∞–µ–º username
    if 't.me/' in tg_name:
        tg_name = tg_name.split('t.me/')[-1]

    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ telegram.me, –∏–∑–≤–ª–µ–∫–∞–µ–º username
    if 'telegram.me/' in tg_name:
        tg_name = tg_name.split('telegram.me/')[-1]

    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ tg.me, –∏–∑–≤–ª–µ–∫–∞–µ–º username
    if 'tg.me/' in tg_name:
        tg_name = tg_name.split('tg.me/')[-1]

    # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª @ –µ—Å–ª–∏ –µ—Å—Ç—å
    if tg_name.startswith('@'):
        tg_name = tg_name[1:]

    # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    tg_name = tg_name.strip()

    # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ ? –µ—Å–ª–∏ –µ—Å—Ç—å
    if '?' in tg_name:
        tg_name = tg_name.split('?')[0]

    return tg_name

def get_db_connection():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    return mysql.connector.connect(
        host=db.host,
        port=db.port,
        user=db.user,
        password=db.password,
        db=db.db
    )

def find_student_by_name(connection, full_name, first_name, last_name):
    """
    –ò—â–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    cursor = None
    try:
        cursor = connection.cursor(dictionary=True)
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
        search_queries = [
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
            ("SELECT * FROM students WHERE full_name = %s", [full_name]),
            # –ü–æ–∏—Å–∫ –ø–æ –§–ê–ú–ò–õ–ò–Ø + –ò–ú–Ø (–Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏) - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫!
            ("SELECT * FROM students WHERE full_name LIKE %s", [f"{last_name} {first_name}%"]),
            # –ü–æ–∏—Å–∫ –ø–æ –§–ê–ú–ò–õ–ò–Ø + –ò–ú–Ø + —á—Ç–æ —É–≥–æ–¥–Ω–æ –ø–æ—Å–ª–µ
            ("SELECT * FROM students WHERE full_name LIKE %s", [f"{last_name} {first_name} %"]),
            # –ü–æ–∏—Å–∫ –ø–æ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—è + –∏–º—è)
            ("SELECT * FROM students WHERE full_name = %s", [f"{last_name} {first_name}"]),
            # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ + —Ñ–∞–º–∏–ª–∏–∏ (–æ–±–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ)
            ("SELECT * FROM students WHERE full_name LIKE %s AND full_name LIKE %s", [f"%{first_name}%", f"%{last_name}%"]),
            # –ü–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ –ø—Ä–æ–±–µ–ª–æ–≤
            ("SELECT * FROM students WHERE REPLACE(full_name, ' ', '') = REPLACE(%s, ' ', '')", [full_name])
        ]
        
        for query, params in search_queries:
            try:
                cursor.execute(query, params)
                student = cursor.fetchone()
                if student:
                    return student
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ {query}: {e}")
                continue
        
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ find_student_by_name: {e}")
        return None
    finally:
        if cursor:
            cursor.close()

def update_student_tg_name(connection, student_id, tg_name):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç Telegram –Ω–∏–∫–Ω–µ–π–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    """
    cursor = None
    try:
        cursor = connection.cursor()
        query = "UPDATE students SET tg_name = %s WHERE id = %s"
        cursor.execute(query, (tg_name, student_id))
        connection.commit()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}: {e}")
        connection.rollback()
        return False
    finally:
        if cursor:
            cursor.close()

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel('__pycache__/–°–ø–∏—Å–æ–∫ —Å–±–æ—Ä–Ω–æ–π + –¢–ì.xlsx')
        
        print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ Excel —Ñ–∞–π–ª–∞:")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
        print(f"–ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫: {list(df.columns)}")
        print()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = get_db_connection()
        
        print(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(df)} –∑–∞–ø–∏—Å–µ–π...")
        print("=" * 80)
        
        updated_count = 0
        not_found_count = 0
        error_count = 0
        skipped_count = 0
        
        for index, row in df.iterrows():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                last_name = str(row['–§–∞–º–∏–ª–∏—è']).strip()
                first_name = str(row['–ò–º—è']).strip()
                middle_name = str(row['–û—Ç—á–µ—Å—Ç–≤–æ']).strip()
                tg_name = row['–ê–∫–∫–∞—É–Ω—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –¢–ì']
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç Telegram –Ω–∏–∫–Ω–µ–π–º–∞
                if pd.isna(tg_name) or str(tg_name).strip() == "":
                    print(f"–°—Ç—Ä–æ–∫–∞ {index + 1}: –ü—Ä–æ–ø—É—â–µ–Ω–æ - –Ω–µ—Ç Telegram –Ω–∏–∫–Ω–µ–π–º–∞")
                    skipped_count += 1
                    continue
                
                # –û—á–∏—â–∞–µ–º Telegram –Ω–∏–∫–Ω–µ–π–º
                clean_tg = clean_telegram_username(tg_name)
                
                if clean_tg == "":
                    print(f"–°—Ç—Ä–æ–∫–∞ {index + 1}: –ü—Ä–æ–ø—É—â–µ–Ω–æ - –ø—É—Å—Ç–æ–π Telegram –Ω–∏–∫–Ω–µ–π–º")
                    skipped_count += 1
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
                full_name = f"{last_name} {first_name} {middle_name}".strip()
                
                print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {full_name} -> {clean_tg}")
                
                # –ò—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                student = find_student_by_name(connection, full_name, first_name, last_name)
                
                if student:
                    # –û–±–Ω–æ–≤–ª—è–µ–º Telegram –Ω–∏–∫–Ω–µ–π–º
                    if update_student_tg_name(connection, student['id'], clean_tg):
                        print(f"  ‚úì –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç ID {student['id']}: {student['full_name']}")
                        updated_count += 1
                    else:
                        print(f"  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student['id']}")
                        error_count += 1
                else:
                    print(f"  ‚úó –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_name}")
                    not_found_count += 1
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index + 1}: {e}")
                error_count += 1
                continue
        
        connection.close()
        
        print("=" * 80)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò:")
        print(f"‚úì –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        print(f"‚úó –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ: {not_found_count}")
        print(f"‚úó –û—à–∏–±–∫–∏: {error_count}")
        print(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç Telegram): {skipped_count}")
        print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(df)}")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        connection = get_db_connection()
        cursor = connection.cursor(dictionary=True)
        cursor.execute("SELECT COUNT(*) as total FROM students")
        total_students = cursor.fetchone()['total']
        
        cursor.execute("SELECT COUNT(*) as with_tg FROM students WHERE tg_name IS NOT NULL AND tg_name != ''")
        with_tg = cursor.fetchone()['with_tg']
        
        cursor.close()
        connection.close()
        
        print("=" * 80)
        print("–§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {total_students}")
        print(f"–° Telegram –Ω–∏–∫–Ω–µ–π–º–∞–º–∏: {with_tg}")
        print(f"–ë–µ–∑ Telegram –Ω–∏–∫–Ω–µ–π–º–æ–≤: {total_students - with_tg}")
        print(f"–ü–æ–∫—Ä—ã—Ç–∏–µ: {(with_tg / total_students * 100):.1f}%")
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
